package mocks

import http "net/http"
import httpclient "gitlab-beta.engr.illinois.edu/sp-box/boxsync/httpclient"
import io "io"
import mock "github.com/stretchr/testify/mock"
import url "net/url"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Do provides a mock function with given fields: req
func (_m *Client) Do(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *Client) Get(_a0 string) (*http.Response, error) {
	ret := _m.Called(_a0)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Head provides a mock function with given fields: _a0
func (_m *Client) Head(_a0 string) (*http.Response, error) {
	ret := _m.Called(_a0)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: _a0, bodyType, body
func (_m *Client) Post(_a0 string, bodyType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(_a0, bodyType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) *http.Response); ok {
		r0 = rf(_a0, bodyType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader) error); ok {
		r1 = rf(_a0, bodyType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostForm provides a mock function with given fields: _a0, data
func (_m *Client) PostForm(_a0 string, data url.Values) (*http.Response, error) {
	ret := _m.Called(_a0, data)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, url.Values) *http.Response); ok {
		r0 = rf(_a0, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, url.Values) error); ok {
		r1 = rf(_a0, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ httpclient.Client = (*Client)(nil)
